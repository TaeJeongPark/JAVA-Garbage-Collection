
/*
 * 가비지 컬렉션은 자동으로 실행되는 JVM의 일부로서, 개발자가 직접 가비지 컬렉션을 호출하거나 조작하는 것은 불가능합니다.
 * 그러나 가비지 컬렉션의 작동을 이해하고 디버깅하기 위해 가비지 컬렉션과 관련된 메모리 사용 예제를 살펴볼 수 있습니다.
 * 아래는 가비지 컬렉션과 관련된 예제 코드입니다.
 */

public class GarbageCollection {
    public static void main(String[] args) {
        // 객체 생성
        MyClass obj1 = new MyClass();
        MyClass obj2 = new MyClass();
        MyClass obj3 = new MyClass();

        // obj2를 null로 설정하여 해당 객체에 대한 참조 제거
        obj2 = null;

        // 가비지 컬렉션 실행 요청
        System.gc();

        // 다른 작업 수행

        // 가비지 컬렉션 후, obj1과 obj3만 도달 가능한 객체로 남음
    }
}

class MyClass {
    // 객체의 멤버 변수
    // ...

    // 객체 생성 시 호출되는 생성자
    public MyClass() {
        // 생성자 코드
        // ...
    }

    // 객체 소멸 시 호출되는 소멸자 (파이널라이저)
    @Override
    protected void finalize() throws Throwable {
        try {
            // 파이널라이저 코드
            // ...
        } finally {
            super.finalize();
        }
    }
}

/*
 * 위의 예제에서는 MyClass라는 클래스를 정의하고, GarbageCollectionExample 클래스에서 객체를 생성합니다. obj1, obj2, obj3은 각각 MyClass 객체를 참조하고 있습니다.
 * obj2 = null;을 통해 obj2에 대한 참조를 제거합니다. 이제 obj2는 가비지 컬렉션의 대상이 될 수 있습니다.
 * System.gc();를 호출하여 가비지 컬렉션을 요청합니다. JVM은 알맞은 시점에서 가비지 컬렉션을 실행하며, 참조되지 않는 객체인 obj2를 메모리에서 해제할 수 있습니다.
 * 주석으로 표시된 부분은 객체 생성자와 파이널라이저의 코드입니다. 생성자는 객체가 생성될 때 호출되고, 파이널라이저는 객체가 소멸되기 전에 호출됩니다.
 * 파이널라이저는 가비지 컬렉션이 객체를 해제하기 전에 마지막으로 어떤 작업을 수행할 수 있는 기회를 제공합니다.
 * 이 예제는 가비지 컬렉션의 작동을 이해하고, 객체가 어떻게 참조되는지와 가비지 컬렉션에 의해 해제되는지를 보여줍니다.
 * 실제로 가비지 컬렉션이 실행되는 시점을 예측하거나 조작하는 것은 불가능하지만, 개발자는 객체 참조를 적절하게 관리하여 가비지 컬렉션의 효율성을 개선할 수 있습니다.
 */
